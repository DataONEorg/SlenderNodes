#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
:mod:`settings`
===============

:Synopsis:
  Settings for the PASTA GMN Adapter.
:Author:
  Roger Dahl
"""

import d1_common.util

################################################################################
# User adjustable settings.

# Enable Django debug mode.
# True:
# * May expose sensitive information.
# * Returns a HTML Django exception page with extensive debug information for
#   internal errors.
# * Returns a HTML Django 404 page that lists all valid URL patterns for invalid
#   URLs.
# * The profiling subsystem can be accessed.
# False:
# * Use for production.
# * Returns a stack trace in a DataONE ServiceFailure exception for internal
#   errors.
# * Returns a regular 404 page for invalid URLs. The page contains a link to the
#   PASTA GMN Adapter home page.
DEBUG = True

# Enable PASTA GMN Adapter debug mode.
# True:
# * Enables functionality that should be accessible only during testing and
#   debugging.
# False:
# * Use for production.
GMN_ADAPTER_DEBUG = True

# Create a unique string for this node and do not share it.
SECRET_KEY = 'secret_string'

# Path to the client side certificate that PASTA GMN Adapter uses when
# connecting over TLS/SSL to GMN. The certificate must be in PEM format.
CLIENT_CERT_PATH = '/var/local/dataone/certs/local_ca/pasta_gmn_cert.pem'

# Path to the private key for the client side certificate set in
# CLIENT_CERT_PATH. The private key must be in PEM format. This is only ONLY
# required to be set if the certificate does not contain an embedded private
# key. Otherwise, set it to None.
CLIENT_CERT_PRIVATE_KEY_PATH = '/var/local/dataone/certs/local_ca/private/pasta_gmn_key_nopassword.pem'

# When DEBUG=False and a view raises an exception, Django will send emails to
# these addresses with the full exception information.
ADMINS = (('Roger Dahl', 'dahl@unm.edu'),)

# The base URL for the Adapter service. This is used by the async
# services.
ADAPTER_BASE_URL = 'https://gmns.lternet.edu'

# The base URL for PASTA. The Adapter uses this when querying PASTA for
# package information.
PASTA_BASE_URL = 'https://pasta-s.lternet.edu/package'

# The Base URL for GMN. The Adapter uses this when creating packages
# on GMN. This will typically use the same FQDN as the Adapter.
GMN_BASE_URL = 'https://gmn-s.lternet.edu/mn'

# Seconds to wait before timing out a request to GMN.
GMN_RESPONSE_TIMEOUT = 3 * 60

# The root of the DataONE environment (CN round robin).
#DATAONE_ROOT_URL = d1_common.const.URL_DATAONE_ROOT
DATAONE_ROOT_URL = 'https://cn.dataone.org/cn'

# All operations of the Adapter are logged to this file.
LOG_PATH = d1_common.util.abs_path('./pasta_gmn_adapter_django.log')

# Seconds to wait before timing out a request to PASTA.
PASTA_RESPONSE_TIMEOUT = 3 * 60

# The user agent to show to PASTA when querying for packages.
PASTA_GMN_ADAPTER_USER_AGENT = 'PASTA-GMN-Adapter/0.0.1 (http://dataone.org)'

# Credentials for the PASTA API.
PASTA_API_USERNAME = 'pasta-api-username'
PASTA_API_PASSWORD = 'pasta-api-password'

# Local cache of the known DataONE Format IDs. The cache is automatically
# updated and is used when creating System Metadata.
FORMAT_ID_CACHE_FILENAME = 'format_id_cache.txt'

# If the Format ID of an object cannot be found in the list of DataONE Format
# IDs, this media type is used.
DEFAULT_MEDIA_TYPE = 'application/octet-stream'

# Time to wait before refreshing Format ID cache.
ASYNC_MAX_FORMAT_ID_AGE_SECONDS = 60 * 60 * 24

# These Format IDs are added to the official DataONE Format IDs.
ASYNC_MEDIA_TYPE_MAP = {
  'application/xml': 'text/xml',
}

# The DataONE identity that is set as the owner of the PASTA objects in DataONE.
# Should match the DN in the certificate, so that GMN allows the adapter to
# update() the objects.
DATAONE_OWNER_IDENTITY = 'dataone-owner-identity'

# Database connection.
DATABASES = {
  'default': {
    # PostgreSQL
    'ENGINE': 'django.db.backends.postgresql_psycopg2',
    'NAME': 'pasta_gmn_adapter',
    'USER': '', # Not used with Peer auth.
    'PASSWORD': '', # Not used with Peer auth.
    'HOST': '', # Set to empty string for localhost.
    'PORT': '', # Set to empty string for default.

    # Wrap each HTTP request in an implicit transaction. The transaction is
    # rolled back if the view does not return successfully. Upon a successful
    # return, the transaction is committed, thus making all modifications that
    # the view made to the database visible simultaneously, bringing the
    # database directly from one valid state to the next.
    #
    # Transactions are also important for views that run only select queries and
    # run more than a single query, as they hide any transitions between valid
    # states that may happen between queries.
    #
    # Do not change this value from "True", as implicit transactions form the
    # basis of concurrency control in the PASTA GMN Adapter.
    'ATOMIC_REQUESTS': True,
  }
}

################################################################################
# Internal settings, not normally changed by user.

TEMPLATE_DEBUG = True

TIME_ZONE = 'UTC'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash if there is a path component (optional in other cases).
# Examples: "http://media.lawrence.com", "http://example.com/media/"
MEDIA_URL = ''

MIDDLEWARE = (
  'pasta_gmn_adapter.app.middleware.exception_handler.ExceptionHandler',
  'pasta_gmn_adapter.app.middleware.view_handler.ViewHandler',
  'django.middleware.common.CommonMiddleware',
)

CACHES = {
  'default': {
    'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    'LOCATION': 'trusted_subjects',
    'TIMEOUT': 60 * 60,
  }
}

ROOT_URLCONF = 'pasta_gmn_adapter.app.urls'

TEMPLATES = [
  {
    'BACKEND': 'django.template.backends.django.DjangoTemplates',
    'DIRS': [
      d1_common.util.abs_path('./app/templates'), # noqa: F405
    ],
    'APP_DIRS': True,
    'OPTIONS': {
      'context_processors': [
        'django.template.context_processors.debug',
        'django.template.context_processors.request',
        'django.contrib.auth.context_processors.auth',
        'django.contrib.messages.context_processors.messages',
      ],
    },
  },
]

INSTALLED_APPS = ('pasta_gmn_adapter',)

# When set to True, if the request URL does not match any of the patterns in
# the URLconf and it doesnâ€™t end in a slash, an HTTP redirect is issued to the
# same URL with a slash appended. Note that the redirect may cause any data
# submitted in a POST request to be lost.
#
# The APPEND_SLASH setting is only used if CommonMiddleware is installed.
APPEND_SLASH = True

################################################################################
# Set up logging.

# Set the level of logging that the PASTA GMN Adapter should perform. Choices
# are: DEBUG, INFO, WARNING, ERROR, CRITICAL or NOTSET.
if DEBUG or GMN_ADAPTER_DEBUG:
  LOG_LEVEL = 'DEBUG'
else:
  LOG_LEVEL = 'WARNING'

LOGGING = {
  'version': 1,
  'disable_existing_loggers': True,
  'formatters': {
    'verbose': {
        'format': '%(asctime)s %(levelname)-8s %(name)s %(module)s ' \
                  '%(process)d %(thread)d %(message)s',
        'datefmt': '%Y-%m-%d %H:%M:%S'
    },
    'simple': {
      'format': '%(levelname)s %(message)s'
    },
  },
  'handlers': {
    'file': {
      'level': LOG_LEVEL,
      'class': 'logging.FileHandler',
      'filename': LOG_PATH,
      'formatter': 'verbose'
    },
    'null': {
      'level': LOG_LEVEL,
      'class': 'logging.NullHandler',
    },
  },
  'loggers': {
    # The "catch all" logger is denoted by ''.
    '': {
      'handlers': ['file'],
      'propagate': True,
      'level': LOG_LEVEL,
    },
    # Django uses this logger.
    'django': {
      'handlers': ['file'],
      'propagate': True,
      'level': LOG_LEVEL
    },
    # Messages relating to the interaction of code with the database. For
    # example, every SQL statement executed by a request is logged at the DEBUG
    # level to this logger.
    'django.db.backends': {
      'handlers': ['null'],
      # Set logging level to "WARNING" to suppress logging of SQL statements.
      'level': 'WARNING',
      'propagate': False
    },
  }
}
